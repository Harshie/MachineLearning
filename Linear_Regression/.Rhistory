y2 <-d2
y2
12.02 + 34.24
cat("C",12.02 + 34.24)
cat("HT",1.58)
cat("HTY",1.90)
cat("T",2.64+3.49)
cat("TY",9.16+1.25)
cat("Y",5.59+3.49)
cat("E",3.49)
cat("EHMN",2.49)
cat("HM",3.49)
cat("HMNTY",11.56)
cat("N",4.74)
46.26 +1.58+1.9+6.13+10.41+9.08+3.49+2.49+3.49+11.56+4.74
sum(y1$x) + sum(y2$x)
# Example 1 of ALDI Dataset
#Price and Category in ASCENDING ORDER
aldi1sept <-c(1.39,'TY',0.85,'C',0.85,'C',1.49,'C',0.85,'TY',1.49,'C',1.26,'TY',1.26,'TY',0.43,'TY',0.95,'T',0.85,'TY',0.79,'TY',1.69,'T',0.69,'C',0.69,'C',0.59,'C',1.29,'C',0.95,'HTY',0.95,'HTY',1.49,'C',0.79,'HT',0.85,'TY',0.24,'TY',0.85,'TY',0.59,'C',0.79,'HT',2,'C',5.59,'Y',0.39,'TY')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
# verifying the total bill cost
sum(d2$x)
# Development phase
y1 <-d2
#Price and Category in ASCENDING ORDER
aldi1sept <-c(2.49,'EHMN',2.89*4,'HMNTY',3.49,'E',3.49,'HM',3.49,'N',3.49,'T',3.49,'Y',3.25,'C',1.25,'N',1.25,'TY',30.99,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
y2 <-d2
#Price and Category in ASCENDING ORDER
aldi1sept <-c(1.08,'H',0.69,'H',0.9,'EMT',2,'EHMNT',1.29,'C',1,'H',1,'H',0.99,'C',0.59,'H',0.44,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(.89*3,'M',3.19,'M',5.40,'HMN',2.49,'M',0.69,'C',4,'HMNTY',.69,'C',.99*3,'C',1.59,'M',.68,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(.89*3,'M',3.19,'M',5.40,'HMN',2.49,'M',0.69,'C',4,'HMNTY',.69,'C',.99*3,'C',1.59,'M',.68,'C'2.35,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(.89*3,'M',3.19,'M',5.40,'HMN',2.49,'M',0.69,'C',4,'HMNTY',.69,'C',.99*3,'C',1.59,'M',.68,'C',2.35,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(2.74,'C',.90,'ENT',2,'5',.79,'HT',1.49,'EHT',.97*2,'HMTY',1.49,'C',1.12,'C',1.35*2,'C',.44,'C',.61,'C',1.12,'C',.49,'C',.89,'EH',.99,'C',.69,'C',.49,'C',.89,'C',4.58,'C',.69,'H',.69,'C',.89,'C',.79,'C',.59,'C',1,'E',.49*2,'C',2.78,'HMNY',.89,'H',.59,'C',1.39,'C',.99,'C',.99,'C',.38*2,'EHT',2,'C',.99,'C',1.09,'C',.92,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(2.74,'C',.90,'ENT',2,'5',.79,'HT',1.49,'EHT',.97*2,'HMTY',1.46,'C',1.12,'C',1.35*2,'C',.44,'C',.61,'C',1.12,'C',.49,'C',.89,'EH',.99,'C',.69,'C',.49,'C',.89,'C',4.58,'C',.69,'H',.69,'C',.89,'C',.79,'C',.59,'C',1,'E',.49*2,'C',2.78,'HMNY',.89,'H',.59,'C',1.39,'C',.99,'C',.99,'C',.38*2,'EHT',2,'C',.99,'C',1.09,'C',.92,'C')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(3.49,'T',3.49,'Y',3.49,'N',3.49,'E',3.49,'HM',4.99,'C',2.25,'C',4.99,'C',28.99,'C',7.49,'C',4.49,'C',1.25*2,'TY',1.25,'M')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
0.89*2 + 0.59*2
#Price and Category in ASCENDING ORDER
aldi1sept <-c(1,'T',.89*3,'C',.49*2,'EHT',.89,'EHT',1.99*2,'T',.59,'C',.99,'EH',1.99*2,'C',1.35,'C',2,'EHMNT',4.49,'M',.44,'C',.79,'HT',.95,'C',.58,'T',2,'TY',.36,'H',.49,'T',1.47,'H')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
#Price and Category in ASCENDING ORDER
aldi1sept <-c(2,'EHMTY',.99*2,'C',.49,'C',1.29*2,'C',.89*2,'C',.59*2,'C',.97,'N')
#Matrix Format
YASHALDI <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(YASHALDI)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
sum(d1$X1)
#count of category
table(d1$X2)
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print(d2)
# verifying the total bill cost
sum(d2$x)
25.5/3
#Price and Category in ASCENDING ORDER
billList <-c(2,'EHMTY',.99*2,'C',.49,'C',1.29*2,'C',.89*2,'C',.59*2,'C',.97,'N')
split(billList)
split <- function(billList){
#Matrix Format
listtomatrix <-matrix(aldi1sept,ncol=2,byrow=T)
#To data frame
d1<-data.frame(listtomatrix)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
cat("Printing total expense for verification",sum(d1$X1))
#count of category
print(table(d1$X2))
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print("The split of the bill is: ")
print(d2)
# verifying the total bill cost
cat("Printing total expense for verification",sum(d2$x))
}
split(billList)
split <- function(billList){
#Matrix Format
listtomatrix <-matrix(billList,ncol=2,byrow=T)
#To data frame
d1<-data.frame(listtomatrix)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
cat("Printing total expense for verification",sum(d1$X1))
#count of category
print(table(d1$X2))
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print("The split of the bill is: ")
print(d2)
# verifying the total bill cost
cat("Printing total expense for verification",sum(d2$x))
}
split(billList)
#Price and Category in ASCENDING ORDER
billList <-c(2*2,'EHMTY',1.35,'C',.59*2,'c',.89*2,'C',.79,'C',1.25,'C',.75,'C',.79,'HT',.99,'EHT',.95,'C',.99,'C',1.08,'H',2.25,'C',2.74,'C',.69,'H')
split(billList)
#Price and Category in ASCENDING ORDER
billList <-c(2*2,'EHMTY',1.35,'C',.59*2,'C',.89*2,'C',.79,'C',1.25,'C',.75,'C',.79,'HT',.99,'EHT',.95,'C',.99,'C',1.08,'H',2.25,'C',2.74,'C',.69,'H')
split(billList)
#Price and Category in ASCENDING ORDER
billList <-c(2*2,'EHMTY',1.35,'C',.59*2,'C',.89*2,'C',.79,'C',1.25,'HMNTY',.75,'C',.79,'HT',.99,'EHT',.95,'C',.99,'C',1.08,'H',2.25,'C',2.74,'C',.69,'H')
split(billList)
#Price and Category in ASCENDING ORDER
billList <-c(.36,'E',1.99,'C',.89,'C',.89,'C',1.79,'C',.79,'C',1,'T',.69,'C',1.4,'HMNTY',.99,'C',.99,'C',.79,'C',.89,'C',1.99,'C',.39*2,'C')
split <- function(billList){
#Matrix Format
listtomatrix <-matrix(billList,ncol=2,byrow=T)
#To data frame
d1<-data.frame(listtomatrix)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
cat("Printing total expense for verification",sum(d1$X1))
#count of category
print(table(d1$X2))
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print("The split of the bill is: ")
print(d2)
# verifying the total bill cost
cat("Printing total expense for verification",sum(d2$x))
}
split(billList)
# Example 1 of ALDI Dataset
#Price and Category in ASCENDING ORDER
aldi1sept <-c(.39,"TY",3.5,'TY',1.39,'C',.36*2,'TY',3,'TY',.89,'TY',1.99*3,'TY',2,'TY',.95,'E',2.99,'C',.97+.34+.34+2.94+2.94-1.88+.39+5,'TY',1.35,'C',1.08,'Y',1.99,'T',2.26,'Y',.89*2,'N',1.49,'C',1.99,'T',2+1.19,'TY',.99,'C',1.31,'Y',.79*4,'C')
#Function for splitting the bill
split <- function(billList){
#Matrix Format
listtomatrix <-matrix(billList,ncol=2,byrow=T)
#To data frame
d1<-data.frame(listtomatrix)
#Price from character to numeric format
d1$X1<-as.numeric(d1$X1)
#validating the total sum
cat("Printing total expense for verification",sum(d1$X1))
#count of category
print(table(d1$X2))
# calculating the share
d2<-aggregate(d1$X1, by=list(Category=d1$X2), FUN=sum)
print("The split of the bill is: ")
print(d2)
# verifying the total bill cost
cat("Printing total expense for verification",sum(d2$x))
}
#Price and Category in ASCENDING ORDER
billList <-c(.39,"TY",3.5,'TY',1.39,'C',.36*2,'TY',3,'TY',.89,'TY',1.99*3,'TY',2,'TY',.95,'E',2.99,'C',.97+.34+.34+2.94+2.94-1.88+.39+5,'TY',1.35,'C',1.08,'Y',1.99,'T',2.26,'Y',.89*2,'N',1.49,'C',1.99,'T',2+1.19,'TY',.99,'C',1.31,'Y',.79*4,'C')
split(billList)
#Price and Category in ASCENDING ORDER
billList <-c(1.08+.89,'H',.89+.89+.99+.59+.59+.88+.99+.99+.49+.49+.81+.99+.99+4.58+1.99+4+1.35+1.35+1.76+.69+2.5+.69+.69+.61+.46,'C',.85+.85+1.49,'EHT',1.99,'E',.89,'EH',5,'N',.28*2,'EH',.9,'E',1.89+.69,'H',6,'EHMNY',.46,'HN',2.5*2,'E',2.5,'EHNTY')
split(billList)
library(arules)
data(package="arules")
data("Groceries")
class(Groceries)
print(Groceries)
inspect(Groceries[1:3])
rules<-apriori(Groceries,parameter = list(support=0.01,confidence = 0.3,maxlen=5))
summary(rules)
rules<-sort(rules,by = "support")
inspect(rules[1:5])
summary(rules)
rules<-apriori(Groceries,parameter = list(support=0.01,confidence=0.5,maxlen=5))
summary(rules)
rules<-apriori(Groceries, parameter = list(support=0.1,confidence=0.5,maxlen=5))
summary(rules)
rules<-apriori(Groceries,parameter = list(support=0.01,confidence=0.5,maxlen=5))
summary(rules)
rules <-apriori(Groceries,parameter =list(support =0.01,confidence =0.5))
qual <-quality(rules)# extract quality measures
# compute p(A) and p(B)
pA <-qual$support/qual$confidence
pB <-qual$confidence/qual$lift
# compute lift upper and lower bounds
U <-apply(cbind(1/pA,1/pB),1, min)
L <-apply(cbind(1/pA+1/pB-1/(pA*pB),0.01/(pA*pB),0.5/pB,0),1, max)
sLift <-(qual$lift-L)/(U-L)# standardized lift
data.frame(rule =labels(rules), sLift)# print rules and sLift
rules <-apriori(Groceries,parameter =list(support =0.01,confidence =0.2))
sub_rules <-head(rules,n =10,by ="lift")# extract top 10 rules with largest lift
inspect(sub_rules)# inspect
library(arulesViz)# load package
install.packages('arulesViz')
library(arulesViz)# load package
plot(sub_rules,method ="graph")
knitr::opts_chunk$set(echo = TRUE)
library(arules)
data(package="arules")
data("Groceries")
?Groceries
class(Groceries)
print(Groceries)
inspect(Groceries[1:3])
setwd("~/Learning/MachineLearning/Linear_Regression")
knitr::opts_chunk$set(echo = TRUE)
hiring <- read.csv("hiring.csv",header = T)
hiring
View(hiring)
View(hiring)
#Updating the field names
colnames(hiring)
View(hiring)
View(hiring)
#Updating the field names
colnames(hiring) <- c('experience','test_score_of_10','interview_score_of_10','salary')
head(hiring)
hiring
isnull(hiring$experience)
is.na(hiring$experience)
is.empty(hiring$experience)
hiring$experience==""
#checking for null values
hiring$experience==""
hiring$experience=='zero'
hiring
hiring$experience='zero'
hiring <- read.csv("hiring.csv",header = T)
#Updating the field names
colnames(hiring) <- c('experience','test_score_of_10','interview_score_of_10','salary')
#checking for null values
hiring$experience==""
if(hiring$experience==""){
hiring$experience='zero'
}
hiring
hiring <- read.csv("hiring.csv",header = T)
#Updating the field names
colnames(hiring) <- c('experience','test_score_of_10','interview_score_of_10','salary')
hiring
for (i in hiring$experience) {
i
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in hiring$experience) {
print(i)
#if(i==""){
#hiring$experience='zero'
#}
}
length(hiring$experience)
for (i in length(hiring$experience)) {
print(i)
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in length(hiring$experience)) {
print(i)
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in 1:length(hiring$experience)) {
print(i)
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in 1:length(hiring$experience)) {
print(i)
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in 1:length(hiring$experience)) {
print(hiring$experience[i])
#if(i==""){
#hiring$experience='zero'
#}
}
for (i in 1:length(hiring$experience)) {
print(hiring$experience[i])
if(hiring$experience[i]==""){
hiring$experience[i]='zero'
}
}
hiring
experience1<- c(0,0,5,2,7,3,10,11)
hiring$experienceNew <- experience1
hiring
# Checking null value of test score
hiring$test_score_of_10==""
# Checking null value of test score
which(hiring$test_score_of_10=="")
# Checking null value of test score
which(hiring$test_score_of_10(hiring$test_score_of_10==""))
# Checking null value of test score
which(hiring(hiring$test_score_of_10==""))
# Checking null value of test score
which((hiring$test_score_of_10==""))
# Checking null value of test score
which(hiring$test_score_of_10==NA)
# Checking null value of test score
is.na(hiring$test_score_of_10==NA)
# Checking null value of test score
is.na(hiring$test_score_of_10)
which(hiring$test_score_of_10==NA)
which.na(hiring$test_score_of_10)
which(is.na(hiring$test_score_of_10))
index1 = which(is.na(hiring$test_score_of_10))
median(hiring$test_score_of_10)
?median
median(hiring$test_score_of_10,na.rm = T)
median(hiring$test_score_of_10,na.rm = F)
medianval <- median(hiring$test_score_of_10,na.rm = T)
hiring$test_score_of_10[index1]
hiring$test_score_of_10[index1] <- medianval
hiring
?lm
fit<- lm(salary~experienceNew+test_score_of_10+interview_score_of_10,data = hiring)
summary(fit)
?predict
salary1 <- predict(fit,data = c(2,9,6))
salary1
salary1 <- predict(fit,data.frame(2,9,6))
test <- data.frame(2,9,6)
salary1 <- predict(fit,data = test)
salary1
salary1 <- predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6))
# 12 yr experience, 10 test score, 10 interview score
salary1 <- predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10))
salary1 <- predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6))
# 12 yr experience, 10 test score, 10 interview score
salary2 <- predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10))
fit2 <-lm(salary~experienceNew+interview_score_of_10,data = hiring)
summary(fit2)
salary <- predict(fit2,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10))
salary <- predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10))
predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6),interval = "confidence")
# 12 yr experience, 10 test score, 10 interview score
predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10),interval = "confidence")
mean(hiring$test_score_of_10,na.rm = T)
int(mean(hiring$test_score_of_10,na.rm = T))
as.integer(mean(hiring$test_score_of_10,na.rm = T))
knitr::opts_chunk$set(echo = TRUE)
# medianval <- median(hiring$test_score_of_10,na.rm = T)
meanval <- as.integer(mean(hiring$test_score_of_10,na.rm = T))
hiring$test_score_of_10[index1] <- meanval
hiring
fit<- lm(salary~experienceNew+test_score_of_10+interview_score_of_10,data = hiring)
summary(fit)
#2 yr experience, 9 test score, 6 interview score.
# Predicting the intervals
predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6),interval = "confidence")
#2 yr experience, 9 test score, 6 interview score.
# Predicting the intervals
predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6),interval = "confidence")
# Predicting the salary
salary1 <- predict(fit,data.frame(experienceNew=2,test_score_of_10=9,interview_score_of_10=6))
salary1
# 12 yr experience, 10 test score, 10 interview score
predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10),interval = "confidence")
salary2 <- predict(fit,data.frame(experienceNew=12,test_score_of_10=10,interview_score_of_10=10))
salary2
